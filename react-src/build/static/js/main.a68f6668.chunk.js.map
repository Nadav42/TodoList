{"version":3,"sources":["api/todoApi.ts","stores/todoStore.tsx","components/todo/CircleCheckbox.tsx","components/todo/TodoItemDisplay.tsx","components/notes/FocusedInput.tsx","components/notes/NoteDisplay.tsx","components/notes/NoteCreateButton.tsx","components/notes/NotesList.tsx","App.tsx","index.tsx"],"names":["browserCurrentUrl","window","location","href","host","split","port","parseInt","apiUrl","console","log","url","api","axios","create","baseURL","get","endpointUrl","params","a","response","data","post","bodyData","successMsg","callback","then","toast","error","info","patch","httpDelete","delete","getNotesData","getNoteById","noteId","deleteNote","todoId","deleteTodoItem","TodoItem","itemData","removeTodoById","this","id","_id","name","checked","observable","action","itemId","body","patchModifyItem","Note","noteData","removeNoteById","createdAt","updatedAt","itemsJsonArray","items","map","item","removeTodoItemById","computed","runInAction","trim","length","itemName","postCreateTodoItem","push","newName","patchModifyNote","todoStore","notesJsonArray","note","notesData","results","fetchNotes","CircleCheckbox","props","className","onClick","onChange","TodoItemDisplay","observer","checkedClass","toggleChecked","remove","FocusedInput","textInput","focus","select","type","value","e","onBlur","ref","elem","React","Component","NoteDisplay","state","editable","editableName","newItemValue","handleEditToggle","setState","handleRemoveNote","confirm","handleNewItemValueChange","target","handleEditableNameChange","handleChangeName","preventDefault","changeName","handleCreateNewItem","addItem","onSubmit","todos","key","renderTitle","placeholder","NoteCreateButton","addNote","NotesList","noteElements","notes","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a68f6668.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport { INote } from './interfaces'\r\n\r\nlet browserCurrentUrl = window.location.href;\r\nbrowserCurrentUrl = browserCurrentUrl.split(\"/\")[2];\r\n\r\nlet host = browserCurrentUrl.split(\":\")[0];\r\nconst port: number = parseInt(browserCurrentUrl.split(\":\")[1]);\r\n\r\nlet apiUrl = `http://${host}:${port}`\r\nconsole.log(host, apiUrl)\r\n\r\nexport let url = apiUrl;\r\n\r\n// axios\r\nlet api = axios.create({\r\n    baseURL: url\r\n});\r\n\r\n// GET REQUEST Helper\r\nconst get = async (endpointUrl: String, params?: Object) => {\r\n\r\n    if (!params) {\r\n        params = {};\r\n    }\r\n\r\n    try {\r\n        const response = await api.get(`${url}${endpointUrl}`, { params: params });\r\n        return response.data;\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n// POST REQUEST Helper\r\nconst post = async (endpointUrl: String, bodyData: Object, successMsg: any, callback: CallableFunction) => {\r\n    api.post(`${url}${endpointUrl}`, bodyData)\r\n        .then((response) => {\r\n            if (response.data[\"errorMsg\"]) {\r\n                toast.error(response.data[\"errorMsg\"])\r\n            }\r\n            else {\r\n                // not null\r\n                if (successMsg) {\r\n                    toast.info(successMsg);\r\n                }\r\n            }\r\n\r\n            if (callback) {\r\n                callback(response.data);\r\n            }\r\n        }, (error) => {\r\n            console.log(error);\r\n        });\r\n}\r\n\r\n// PATCH REQUEST Helper\r\nconst patch = async (endpointUrl: String, bodyData: Object, successMsg: any, callback: CallableFunction) => {\r\n    api.patch(`${url}${endpointUrl}`, bodyData)\r\n        .then((response) => {\r\n            if (response.data[\"errorMsg\"]) {\r\n                toast.error(response.data[\"errorMsg\"])\r\n            }\r\n            else {\r\n                // not null\r\n                if (successMsg) {\r\n                    toast.info(successMsg);\r\n                }\r\n            }\r\n\r\n            if (callback) {\r\n                callback(response.data);\r\n            }\r\n        }, (error) => {\r\n            console.log(error);\r\n        });\r\n}\r\n\r\n// DELETE REQUEST Helper\r\nconst httpDelete = async (endpointUrl: String) => {\r\n    try {\r\n        const response = await api.delete(`${url}${endpointUrl}`);\r\n        return response.data;\r\n    }\r\n    catch (error) {\r\n        console.log(error);\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\n// ---------- api ---------- //\r\n\r\n// get all notes data\r\nexport const getNotesData = async (): Promise<{ results: [INote] }> => {\r\n    return await get(\"/api/notes/fetch\");\r\n}\r\n\r\n// get single note by id\r\nexport const getNoteById = async (noteId: string): Promise<INote> => {\r\n    return await get(`/api/notes/${noteId}`);\r\n}\r\n\r\n// post create note\r\nexport const postCreateNote = (name: String, callback: CallableFunction) => {\r\n    let body = {\r\n        name: name,\r\n    };\r\n\r\n    post(\"/api/notes/create\", body, null, callback);\r\n}\r\n\r\n// patch modify note (name)\r\nexport const patchModifyNote = (noteId: string, name: string, callback: CallableFunction) => {\r\n    let body = {\r\n        name: name,\r\n    };\r\n\r\n    patch(`/api/notes/${noteId}`, body, null, callback);\r\n}\r\n\r\n// remove todo list\r\nexport const deleteNote = async (todoId: string): Promise<INote> => {\r\n    return await httpDelete(`/api/notes/${todoId}`);\r\n}\r\n\r\n// items\r\n\r\n// post create todo item\r\nexport const postCreateTodoItem = (noteId: string, name: String, callback: CallableFunction) => {\r\n    let body = {\r\n        noteId: noteId,\r\n        itemName: name\r\n    };\r\n\r\n    post(\"/api/items/add\", body, null, callback);\r\n}\r\n\r\n// patch modify item\r\nexport const patchModifyItem = (noteId: string, itemId: string, name: string, checked: boolean, callback: CallableFunction) => {\r\n    let body = {\r\n        name: name,\r\n        checked: checked\r\n    };\r\n\r\n    patch(`/api/items/${noteId}/${itemId}`, body, null, callback);\r\n}\r\n\r\n// remove todo item\r\nexport const deleteTodoItem = async (noteId: string, todoId: string): Promise<INote> => {\r\n    return await httpDelete(`/api/items/${noteId}/${todoId}`);\r\n}\r\n\r\n\r\nexport default api;","import { observable, computed, action, runInAction } from 'mobx';\r\nimport { getNotesData, getNoteById, postCreateNote, patchModifyNote, deleteNote, patchModifyItem, postCreateTodoItem, deleteTodoItem } from '../api/todoApi';\r\nimport { INote, ITodoItem } from '../api/interfaces'; // endpoint return type structures\r\n\r\n// single todo item\r\nclass TodoItem {\r\n    noteId: string; // parent note id\r\n    @observable id: string;\r\n    @observable name: string;\r\n    @observable checked: boolean;\r\n    removeTodoById: CallableFunction;\r\n\r\n    constructor(noteId: string, itemData: ITodoItem, removeTodoById: CallableFunction) {\r\n        this.noteId = noteId;\r\n        this.id = itemData._id\r\n        this.name = itemData.name;\r\n        this.checked = itemData.checked;\r\n\r\n        // function for removing todo items by id\r\n        this.removeTodoById = removeTodoById;\r\n    }\r\n\r\n    @action\r\n    toggleChecked = () => {\r\n        patchModifyItem(this.noteId, this.id, this.name, !this.checked, (data: ITodoItem) => {\r\n            this.checked = data.checked;\r\n        });\r\n    }\r\n\r\n    @action // remove self\r\n    remove = async () => {\r\n        this.removeTodoById(this.id);\r\n    }\r\n}\r\n\r\n// single note\r\nclass Note {\r\n    @observable id: string;\r\n    @observable name: string;\r\n    @observable createdAt: Date;\r\n    @observable updatedAt: Date;\r\n    @observable private itemsJsonArray: ITodoItem[] = []; // array of json objects, use computed property \"items\" for actions\r\n    removeNoteById: CallableFunction;\r\n\r\n    // create instances with observable for each todo item\r\n    @computed get items(): TodoItem[] {\r\n        return this.itemsJsonArray.map(item => new TodoItem(this.id, item, this.removeTodoItemById));\r\n    }\r\n\r\n    constructor(noteData: INote, removeNoteById: CallableFunction) {\r\n        this.id = noteData._id\r\n        this.name = noteData.name;\r\n        this.createdAt = noteData.createdAt;\r\n        this.updatedAt = noteData.updatedAt;\r\n\r\n        // create instance with observable each todo item\r\n        this.itemsJsonArray = noteData.items;\r\n\r\n        // function for removing note by id\r\n        this.removeNoteById = removeNoteById;\r\n    }\r\n\r\n    @action\r\n    fetchNoteData = async () => {\r\n        const noteData = await getNoteById(this.id);\r\n\r\n        runInAction(() => {\r\n            this.name = noteData.name;\r\n            this.itemsJsonArray = noteData.items;\r\n        })\r\n    }\r\n\r\n    @action\r\n    addItem = (name: string) => {\r\n        // return if empty string\r\n        if (!name || name.trim().length === 0) {\r\n            return\r\n        }\r\n\r\n        // create new todo item in this note\r\n        postCreateTodoItem(this.id, name, (itemData: ITodoItem) => {\r\n            if (!itemData || !itemData._id) {\r\n                return;\r\n            }\r\n\r\n            // create was done successfully\r\n            this.itemsJsonArray.push(itemData);\r\n        });\r\n    }\r\n\r\n    @action\r\n    changeName = (newName: string) => {\r\n        patchModifyNote(this.id, newName, (data: INote) => {\r\n            this.name = data.name;\r\n        });\r\n    }\r\n\r\n    @action // remove self\r\n    remove = async () => {\r\n        this.removeNoteById(this.id);\r\n    }\r\n\r\n    @action // remove child (todo item)\r\n    removeTodoItemById = async (itemId: string) => {\r\n        const noteData: INote = await deleteTodoItem(this.id, itemId);\r\n\r\n        // if note to delete was found and delete success\r\n        if (noteData._id && noteData.items) {\r\n            runInAction(() => {\r\n                this.itemsJsonArray = noteData.items;\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n// list of all notes\r\nclass TodoStore {\r\n    @observable notesJsonArray: INote[] = [];\r\n\r\n    // create instances with observable for each todo item\r\n    @computed get notes(): Note[] {\r\n        return this.notesJsonArray.map(note => new Note(note, this.removeNoteById));\r\n    }\r\n\r\n    @action\r\n    fetchNotes = async () => {\r\n        const notesData = await getNotesData();\r\n\r\n        runInAction(() => {\r\n            this.notesJsonArray = notesData.results;\r\n        })\r\n    }\r\n\r\n    @action\r\n    addNote = () => {\r\n        postCreateNote(\"New List\", (noteData: INote) => {\r\n            if (!noteData || !noteData._id) {\r\n                return;\r\n            }\r\n\r\n            // create was done successfully\r\n            this.notesJsonArray.push(noteData);\r\n        });\r\n    }\r\n\r\n    @action\r\n    removeNoteById = async (id: string) => {\r\n        const data = await deleteNote(id);\r\n\r\n        // if note to delete was found and delete success\r\n        if (data._id && data._id === id) {\r\n            runInAction(() => {\r\n                this.fetchNotes();\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n// interfaces for react prop types\r\nexport interface TodoStoreProps {\r\n    todoStore: TodoStore;\r\n}\r\n\r\nexport interface NoteProps {\r\n    note: Note;\r\n}\r\n\r\nexport interface TodoItemProps {\r\n    item: TodoItem;\r\n}\r\n\r\n// the store\r\nconst todoStore = new TodoStore();\r\n\r\nexport default todoStore;","import React from 'react';\r\nimport { MdCheck } from 'react-icons/md'\r\n\r\nfunction CircleCheckbox(props: { checked: boolean, onChange: CallableFunction }) {\r\n\r\n\r\n    if (props.checked) {\r\n        return (\r\n            <div className=\"circle-checkbox checked\" onClick={() => { props.onChange() }}>\r\n                <div className=\"checkmark\"><MdCheck /></div>\r\n            </div>\r\n        );\r\n    }\r\n    else {\r\n        return <div className=\"circle-checkbox\" onClick={() => { props.onChange() }} />;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default CircleCheckbox;","import React from 'react';\r\nimport { observer } from 'mobx-react'\r\n\r\nimport { TodoItemProps } from '../../stores/todoStore'\r\nimport CircleCheckbox from './CircleCheckbox'\r\n\r\nimport { IoIosRemoveCircleOutline } from 'react-icons/io'\r\n\r\nconst TodoItemDisplay = observer((props: TodoItemProps) => {\r\n    const item = props.item;\r\n    let checkedClass = \"\";\r\n\r\n    if (item.checked) {\r\n        checkedClass = \"checked\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo-item\">\r\n            <div className=\"checkbox-container\">\r\n                <CircleCheckbox checked={item.checked} onChange={item.toggleChecked} />\r\n            </div>\r\n\r\n            <div className={`todo-content ${checkedClass}`}>{item.name}</div>\r\n            <div className=\"todo-remove\" onClick={item.remove}><IoIosRemoveCircleOutline /></div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default TodoItemDisplay;","import React from 'react'\r\n\r\ninterface propTypes {\r\n    value: string,\r\n    onChange: CallableFunction\r\n    onBlur: CallableFunction\r\n}\r\n\r\n// an input field that is auto focused on mount\r\nclass FocusedInput extends React.Component<propTypes> {\r\n    textInput: HTMLInputElement | null;\r\n\r\n    constructor(props: propTypes) {\r\n        super(props);\r\n\r\n        this.textInput = null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.textInput) {\r\n            this.textInput.focus();\r\n            this.textInput.select();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <input type=\"text\" className=\"title-text-input\" value={this.props.value} onChange={(e) => this.props.onChange(e)} onBlur={() => this.props.onBlur()} ref={elem => (this.textInput = elem)} />\r\n    }\r\n}\r\n\r\nexport default FocusedInput","import React from 'react';\r\nimport { observer } from 'mobx-react'\r\nimport { FaEdit, FaTrash } from 'react-icons/fa'\r\n\r\nimport TodoItemDisplay from '../todo/TodoItemDisplay'\r\nimport { NoteProps } from '../../stores/todoStore'\r\nimport FocusedInput from './FocusedInput'\r\n\r\n@observer\r\nclass NoteDisplay extends React.Component<NoteProps, { editable: boolean, editableName: string, newItemValue: string }> {\r\n    state = { editable: false, editableName: \"\", newItemValue: \"\" };\r\n\r\n    handleEditToggle = () => {\r\n        let editableName = this.state.editableName;\r\n\r\n        // copy original name to edit input\r\n        if (editableName.trim().length < 1) {\r\n            editableName = this.props.note.name;\r\n        }\r\n\r\n        this.setState({ editable: !this.state.editable, editableName: editableName });\r\n    }\r\n\r\n    handleRemoveNote = () => {\r\n        const confirmResult = window.confirm(\"This action can not be restored, delete note?\");\r\n        if (confirmResult) {\r\n            this.props.note.remove();\r\n        }\r\n    }\r\n\r\n    handleNewItemValueChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ newItemValue: e.target.value });\r\n    }\r\n\r\n    handleEditableNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ editableName: e.target.value });\r\n    }\r\n\r\n    // submit list name change\r\n    handleChangeName = (e: React.FormEvent<HTMLFormElement>) => {\r\n        if (e && e.preventDefault) {\r\n            e.preventDefault();\r\n        }\r\n\r\n        this.setState({ editable: false });\r\n\r\n        if (this.state.editableName && this.state.editableName.trim().length > 0) {\r\n            this.props.note.changeName(this.state.editableName);\r\n        }\r\n    }\r\n\r\n    // submit new todo item\r\n    handleCreateNewItem = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        this.props.note.addItem(this.state.newItemValue);\r\n        this.setState({ newItemValue: \"\" }); // reset form\r\n    }\r\n\r\n    // editable title\r\n    renderTitle() {\r\n        if (!this.state.editable) {\r\n            return <div className=\"note-title\" onClick={this.handleEditToggle}>{this.props.note.name}</div>;\r\n        }\r\n\r\n        // editable input\r\n        return (\r\n            <form onSubmit={this.handleChangeName}>\r\n                <FocusedInput value={this.state.editableName} onChange={this.handleEditableNameChange} onBlur={this.handleChangeName} />\r\n            </form>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        const todos = this.props.note.items.map(item => <TodoItemDisplay key={item.id} item={item} />)\r\n\r\n        return (\r\n            <div className=\"col-12 col-md-6 col-lg-3\">\r\n                <div className=\"todo-list-container mx-auto border\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-8\">\r\n                            {this.renderTitle()}\r\n                        </div>\r\n                        <div className=\"col-4 text-right\">\r\n                            <span className=\"title-icon text-muted\" onClick={this.handleEditToggle}><FaEdit /></span>\r\n                            <span className=\"title-icon text-muted\" onClick={this.handleRemoveNote}><FaTrash /></span>\r\n                        </div>\r\n                    </div>\r\n                    <hr></hr>\r\n                    <div className=\"todo-list\">\r\n                        {todos}\r\n                    </div>\r\n                    <div>\r\n                        <form onSubmit={this.handleCreateNewItem}>\r\n                            <div className=\"input-group\">\r\n                                <input type=\"text\" className=\"item-text-input\" value={this.state.newItemValue} onChange={this.handleNewItemValueChange} placeholder=\"Add task\" />\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NoteDisplay;","import React from 'react';\r\nimport { observer } from 'mobx-react'\r\n\r\nimport { TodoStoreProps } from '../../stores/todoStore'\r\n\r\nconst NoteCreateButton = observer((props: TodoStoreProps) => {\r\n    return (\r\n        <div className=\"col-12 col-md-6 col-lg-3\">\r\n            <button className=\"btn btn-warning btn-orange w-100\" onClick={props.todoStore.addNote}>New List</button>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default NoteCreateButton;","import React from 'react';\r\nimport { observer } from 'mobx-react'\r\n\r\nimport { TodoStoreProps } from '../../stores/todoStore'\r\nimport NoteDisplay from './NoteDisplay'\r\nimport NoteCreateButton from './NoteCreateButton'\r\n\r\nconst NotesList = observer((props: TodoStoreProps) => {\r\n    const noteElements = props.todoStore.notes.map(note => <NoteDisplay key={note.id} note={note} />)\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            {noteElements}\r\n            <NoteCreateButton todoStore={props.todoStore} />\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default NotesList;","import React from 'react';\r\nimport { observer } from 'mobx-react'\r\n\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport { TodoStoreProps } from './stores/todoStore'\r\nimport NotesList from './components/notes/NotesList'\r\n\r\nimport './css/main.css';\r\n\r\n@observer\r\nclass App extends React.Component<TodoStoreProps> {\r\n    componentDidMount() {\r\n        this.props.todoStore.fetchNotes(); // load notes on startup\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container my-5\">\r\n                <NotesList todoStore={this.props.todoStore} />\r\n                <ToastContainer />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// import { Provider } from 'mobx-react' --> causes issues with props typing because typescript doesn't know what's being @injected\r\nimport todoStore from './stores/todoStore'\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App todoStore={todoStore} />, document.getElementById('root'));"],"sourceRoot":""}